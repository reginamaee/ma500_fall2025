[
  {
    "objectID": "Day2.html#section",
    "href": "Day2.html#section",
    "title": "MA-500 Intro to R",
    "section": ":::",
    "text": ":::\nConditionals\n\n\n\nExample: Write an if-else statement that prints the letter grade based off of the numeric scores.\n\nA: 90 or higher\nB: 75-89\nC: less than 75"
  },
  {
    "objectID": "Day2.html#t",
    "href": "Day2.html#t",
    "title": "MA-500 Intro to R",
    "section": "T",
    "text": "T\n\n\noutput$phonePhot &lt;- renderPlot({\n  \n})"
  },
  {
    "objectID": "Day2.html#t-1",
    "href": "Day2.html#t-1",
    "title": "MA-500 Intro to R",
    "section": "T",
    "text": "T\n\n\noutput$phonePlot &lt;- renderPlot({\n  # Render a barplot\n  barplot(WorldPhones[,input$region]*1000, \n          main=input$region,\n          ylab=\"Number of Telephones\",\n          xlab=\"Year\")\n})"
  },
  {
    "objectID": "Day2.html#conditionals-1",
    "href": "Day2.html#conditionals-1",
    "title": "MA-500 Intro to R",
    "section": "Conditionals",
    "text": "Conditionals\n\n\n\nhide code\nif (condition) {\n do if TRUE \n} else {\ndo if FALSE\n}"
  },
  {
    "objectID": "Day2.html#conditionals",
    "href": "Day2.html#conditionals",
    "title": "MA-500 Intro to R",
    "section": "Conditionals",
    "text": "Conditionals\n\nConditionals (e.g., if, else if, else) let you run certain sections of code only if a specific condition is true. This is useful when you want your program to make decisions or take different paths depending on the situation."
  },
  {
    "objectID": "Day2.html#conditionals-2",
    "href": "Day2.html#conditionals-2",
    "title": "MA-500 Intro to R",
    "section": "Conditionals",
    "text": "Conditionals\n\n\n\nhide code\nif (condition) {\n do something\n} else if (condition2) {\n do something\n} else {\ndo this instead\n}\n\n\n\n\n\nConditionals\n\n\n\n\n\n\nExample: Write an if-else statement that prints the letter grade based off of the numeric scores.\n\nA: 90 or higher\nB: 75-89\nC: less than 75\n\n\n\n\n\n#| edit: true\n#| min-lines: 3\n\n\n\n\nFunctions\n\nFunctions let you group code into reusable blocks. Instead of repeating the same code in multiple places, you can define it once and call it whenever you need. Functions can also take inputs (arguments) and return outputs (results).\n\n\n\n\nFunctions\n\n\n\nhide code\n# Define a function\nfunction_name &lt;- function(arg1, arg2, ...) {\n  \n  # do something here with arg1 and arg2\n  \n  # Step 3: Return the result\n  return(result)\n}\n\n\n# Call (use) the function\nfunction_name(value1, value2)\n\n\n\n\n\n\nFunctions\n\n\n\nhide code\n#' purpose of this function\n#'\n#' @param arg1 define arg1\n#' @param arg2 define arg2\n#'\n#' @return description \nfunction_name &lt;- function(arg1, arg2, ...) {\n  \n  # do something here with arg1 and arg2\n  \n  # Step 3: Return the result\n  return(result)\n}\n\n\n# Call (use) the function\nfunction_name(value1, value2)\n\n\n\n\n\n\nFunctions\n\n\n\n\n\n\nExample: Write a function that assigns the letter grade based off of the numeric scores.\n\nA: 90 or higher\nB: 75-89\nC: less than 75\n\n\n\n\n\n#| edit: true\n#| min-lines: 3\n\n\n\n\nRecursive Functions\nA recursive function is a function that calls itself to solve smaller instances of the same problem. It’s particularly useful for tasks that can be broken down into simpler, repetitive sub-tasks\n\n\n\nFactorials\n\n\n\n\n\n\nExample: Calculate the factorial of a non-negative integer n,\n\\[n! = n \\times (n - 1) \\times (n - 2) \\times . . . \\times 2 \\times 1 \\]\n\n\n\n\n\n\nFactorials\n\n\n\n\n\n\nExample: Calculate the factorial of a non-negative integer n,\n\\[n! = n \\times (n - 1) \\times (n - 2) \\times . . . \\times 2 \\times 1 \\]\n\n\n\n\n\nhide code\n#' Calculate the factorial of a given integer using recursion\n#'\n#' @param n non-negative integer\n#' @return n!\nfactorial_recursive &lt;- function(n) {\n if(n == 0) {\n  return(1)\n } else {\n  return(n * factorial_recursive(n-1))\n }\n}\n\n\n\n#| edit: true\n#| min-lines: 4\n\n\n\n\nLoops\n\nLoops (e.g., for, while) allow you to repeat sections of code multiple times without writing them out again. This is especially helpful when performing the same task on many items, such as processing each value in a dataset.\n\n\n\nhide code\nfor (loopindex in vector) {\n  do this\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MA500: Introduction to R",
    "section": "",
    "text": "MA-500: Introduction to R\nFANUCHÅNAN 2025: 8/20/2025 - 10/11/2025\nInstructor Information\nRegina-Mae Dominguez | dominguezr@triton.uog.edu\nOffice Hours & Location: Online by Appointments",
    "crumbs": [
      "MA-500: Introduction to R"
    ]
  },
  {
    "objectID": "index.html#course-introduction",
    "href": "index.html#course-introduction",
    "title": "MA500: Introduction to R",
    "section": "Course Introduction",
    "text": "Course Introduction\nThis markdown site will include notes, guides, and resources, while Moodle will be the central hub for the course as well as the platform for uploading and submitting homework assignments. As the course progresses, this site will be regularly updated to ensure it’s helpful, easy to navigate, and accessible whenever you need a reference. While this resource is designed to be useful, I strongly encourage you to take your own notes for a more personalized and detailed study guide.",
    "crumbs": [
      "MA-500: Introduction to R"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "04_CLF.html",
    "href": "04_CLF.html",
    "title": "Conditionals, Loops, and Functions",
    "section": "",
    "text": "Templates\nWhen you need to control the flow and logic of your code, you can use conditional statements, loops, or functions.",
    "crumbs": [
      "Conditionals, Loops, and Functions"
    ]
  },
  {
    "objectID": "04_CLF.html#templates",
    "href": "04_CLF.html#templates",
    "title": "Conditionals, Loops, and Functions",
    "section": "",
    "text": "If-Else\n\n\nhide code\nif (condition) {\n do something\n} else if (condition2) {\n do something\n} else {\ndo this instead\n}\n\n\n\n\nFunctions\n\n\nhide code\n#' purpose of this function\n#'\n#' @param arg1 define arg1\n#' @param arg2 define arg2\n#'\n#' @return description \nfunction_name &lt;- function(arg1, arg2, ...) {\n  \n  # do something here with arg1 and arg2\n  \n  # Step 3: Return the result\n  return(result)\n}\n\n\n# Call (use) the function\nfunction_name(value1, value2)\n\n\n\n\nLoops\n\n\nhide code\nfor (loopindex in vector) {\n  do this\n}",
    "crumbs": [
      "Conditionals, Loops, and Functions"
    ]
  },
  {
    "objectID": "04_CLF.html#if-else-1",
    "href": "04_CLF.html#if-else-1",
    "title": "Conditionals, Loops, and Functions",
    "section": "If-else",
    "text": "If-else\n\nExample:\nWrite an if-else statement that prints the letter grade based off of the numeric scores.\n\nA: 90 or higher\nB: 75-89\nC: less than 75\n\nSolution:\n\n\nhide code\nscore &lt;- 80\n\nif (score &gt;= 90) {\n  print(\"A\") \n} else if (score &gt;= 75) {\n  print(\"B\")\n} else {\n  print(\"C\")\n}\n\n\n[1] \"B\"",
    "crumbs": [
      "Conditionals, Loops, and Functions"
    ]
  },
  {
    "objectID": "04_CLF.html#functions-1",
    "href": "04_CLF.html#functions-1",
    "title": "Conditionals, Loops, and Functions",
    "section": "Functions",
    "text": "Functions\nLet us extend our if-else statement from above and put it into a defined function that takes the numeric score as an input and outputs its respective letter grade.\n\nExample:\nWrite a function that assigns the letter grade based off of the numeric scores.\n\nA: 90 or higher\nB: 75-89\nC: less than 75\n\nSolution:\n\n\nhide code\n#' This function returns a letter grade based off of their numeric grade.\n#' \n#' param @score numeric score from 0-100\n#' return A,B,C\nget_grade &lt;- function(score) {\n  if (score &gt;= 90) {\n  grade &lt;- \"A\"\n} else if (score &gt;= 75) {\n  grade &lt;- \"B\"\n} else {\n  grade &lt;- \"C\"\n}\n  return(grade)\n}\n\n# call the function\nget_grade(80)\n\n\n[1] \"B\"\n\n\nhide code\nget_grade(100)\n\n\n[1] \"A\"\n\n\nhide code\nget_grade(8)\n\n\n[1] \"C\"\n\n\n\n\nRecursive Functions\nA recursive function is a function that calls itself to solve smaller instances of the same problem. It’s particularly useful for tasks that can be broken down into simpler, repetitive sub-tasks.\n\nExample:\nCalculate the factorial of a non-negative integer n,\n\\[n! = n \\times (n - 1) \\times (n - 2) \\times . . . \\times 2 \\times 1 \\]\nSolution:\n\n\nhide code\n#' Calculate the factorial of a given integer using recursion\n#'\n#' @param n non-negative integer\n#' @return n!\nfactorial_recursive &lt;- function(n) {\n if(n == 0) {\n  return(1)\n } else {\n  return(n * factorial_recursive(n-1))\n }\n}\n\nfactorial_recursive(6)\n\n\n[1] 720\n\n\n\nNote: R already has a base function called factorial.",
    "crumbs": [
      "Conditionals, Loops, and Functions"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever.\n\n\nhide code\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "Day2.html",
    "href": "Day2.html",
    "title": "MA-500 Intro to R",
    "section": "",
    "text": "#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})"
  },
  {
    "objectID": "03_Basics.html",
    "href": "03_Basics.html",
    "title": "R Basics & Fundamentals",
    "section": "",
    "text": "R Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\nImportant commands when using RMarkdown: Use the / to quick insert markdown elements: R code chunk, Heading/Format Options, etc.\nIn-line code notation: ` &lt;- symbol with ~ on keyboard?",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#r-markdown",
    "href": "03_Basics.html#r-markdown",
    "title": "R Basics & Fundamentals",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\nImportant commands when using RMarkdown: Use the / to quick insert markdown elements: R code chunk, Heading/Format Options, etc.\nIn-line code notation: ` &lt;- symbol with ~ on keyboard?"
  },
  {
    "objectID": "03_Basics.html#comments",
    "href": "03_Basics.html#comments",
    "title": "R Basics & Fundamentals",
    "section": "Comments",
    "text": "Comments\nIt is recommended to always comment/annotate your code to make concepts clear. In R, we use the # symbol to indicate a comment.\n\n\nhide code\n# this is a comment \n\n#' \n#' this is a multi-line comment\n#'",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#using-r-as-a-calculator",
    "href": "03_Basics.html#using-r-as-a-calculator",
    "title": "R Basics & Fundamentals",
    "section": "Using R as a calculator",
    "text": "Using R as a calculator\n\n\nhide code\n# in either a script or the console, you can use it to solve basic arithmentic\n1 / 200 * 30\n\n\n[1] 0.15\n\n\nhide code\nsin(pi/2)\n\n\n[1] 1",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#r-packages",
    "href": "03_Basics.html#r-packages",
    "title": "R Basics & Fundamentals",
    "section": "R Packages",
    "text": "R Packages\nThe base installation of R consists of many in-house functions and commands, but more specialized techniques would require the installation of packages. A few packages that you should have for this course and I would recommend downloading are:\n\nggplot2\nMASS\nstats\ntidyverse/dplyr\n\nNote: If you are using a mac, some development packages would require you to install XQuartz or XCode. If issues come up with installing a package or getting a package to work, please let me know so I can help you out!\nFind more packages here: https://cran.r-project.org/\n\n\nhide code\n# how to install packages\ninstall.packages(\"MASS\")\n\n\n\n\nhide code\n# calling the package after installation\nlibrary(\"MASS\")\n\n\n\n\nhide code\n# updating packages/all packages\nupdate.packages()",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#directories",
    "href": "03_Basics.html#directories",
    "title": "R Basics & Fundamentals",
    "section": "Directories",
    "text": "Directories\nWhen you run RStudio, your session is typically associated with a working directory. This is the default location where your files are imported or saved.\n\n\nhide code\n# check your working directory with this function\ngetwd()\n\n\n[1] \"/Users/rdominguez/Documents/MA500/Fall25/ma500_fall2025\"\n\n\n\n\nhide code\nsetwd(\"/insertFilePathHere\")",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#variables",
    "href": "03_Basics.html#variables",
    "title": "R Basics & Fundamentals",
    "section": "Variables",
    "text": "Variables\nYou can save and create new objects to store your results by using &lt;- (as opposed to the conventional = which is used with named function assignments.)\n\n\nhide code\n# store the result of 4*3 into x\n\nx &lt;- 4 * 3\n\n# print x (assignment alone does not print output)\nprint(x)\n\n\n[1] 12\n\n\nNote: R is a dynamic language, so the types and values can easily be changed. (type checks are done during run-time)\n\n\nhide code\n# x is now a of type character\nx &lt;- \"statistics\"",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#r-data-types",
    "href": "03_Basics.html#r-data-types",
    "title": "R Basics & Fundamentals",
    "section": "R data types",
    "text": "R data types\nA data type describes the kind of values a variable can hold and how R will interpret and use those values in calculations, comparisons, and functions. Choosing/creating the right data type is important because it affects how R stores information and what operations you can perform.\nR data types include:\n\nnumeric:\n\ndouble values with decimals\nint whole numbers\n\ncharacter – text or strings (\"Hello\")\nlogical – TRUE/FALSE values\nfactor – categorical data (\"A\", \"B\")\n\nUse the class() function to determine what data type your variable is:\n\n\nhide code\nclass(2L)\n\n\n[1] \"integer\"\n\n\nhide code\nclass(2)\n\n\n[1] \"numeric\"",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#data-vectors",
    "href": "03_Basics.html#data-vectors",
    "title": "R Basics & Fundamentals",
    "section": "Data Vectors",
    "text": "Data Vectors\nAn R data vector is a collection of observations or measurements concerning a single variable of the same data type (all numeric, all character, all logical, etc.). The c() function takes individual values and combines them into a single vector.\n\nExample\nIn 2021, the average temperature in Guam for each month was 80.7, 81.4, 81.5, 82.6, 82.6, 83.7, 83.4, 81.8, 82.5, 81.4, 82.0, and 81.0. Store these values in a vector named temp.\nSolution:\n\n\nhide code\ntemp &lt;- c(80.7, 81.4, 81.5, 82.6, 82.6, 83.7, 83.4, 81.8, 82.5, 81.4, 82.0, 81.0)\n\n\n\n\n\nhide code\n# returns the length of temp \nlength(temp)\n\n\n[1] 12\n\n\n\n\nhide code\n# we can perform these function because all values in temp is a numeric value\nsum(temp)\n\n\n[1] 984.6\n\n\n\n\nhide code\nmean(temp)\n\n\n[1] 82.05\n\n\nIn the case you have a NA in your vector, sum() and mean() will return NA. To bypass that, you need to include the argument: na.rm = TRUE.\n\nAttributes\nVectors can be assigned attributes or names.\n\n\nhide code\nmonths &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"July\",\n    \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\nnames(temp) &lt;- months\nprint(temp)\n\n\n Jan  Feb  Mar  Apr  May  Jun July  Aug  Sep  Oct  Nov  Dec \n80.7 81.4 81.5 82.6 82.6 83.7 83.4 81.8 82.5 81.4 82.0 81.0 \n\n\n\n\nIndexing\nYou can call a specific value in the temp vector by referencing its respective name.\n\n\nhide code\n# get the average temperature in May\ntemp[\"May\"]\n\n\n May \n82.6 \n\n\nOR, you can index the vector by referencing its numeric index value.\n\n\nhide code\n# grabs the first value\ntemp[1]\n\n\n Jan \n80.7 \n\n\nhide code\n# grab the first 4 values\ntemp[1:4]\n\n\n Jan  Feb  Mar  Apr \n80.7 81.4 81.5 82.6 \n\n\n\n\nOperators\nOperators are symbols that tell R what kind of computation to perform on values or variables. They are the building blocks for calculations, comparisons, and logical expressions.\n\nComparison:\n\n&gt; greater than\n&lt; less than\n&lt;= less than or equal to\n&gt;= greater than or equal to\n== equal to\n!= not equal to\n\n\n\n\nExample:\nWhat months have a higher average temperature compared to August?\nSolution:\n\n\nhide code\ntemp[temp &lt; temp[\"Aug\"]]\n\n\n Jan  Feb  Mar  Oct  Dec \n80.7 81.4 81.5 81.4 81.0 \n\n\n\nLet’s break the line of code down:\n\ntemp['Aug'] : refers to the temperature in August.\ntemp &gt; temp['Aug'] : checks all values of the temp vector to check if this statement is true\ntemp[temp &gt; temp['Aug']]: returns only the months & values where the second bullet is true.\n\n\nLogical\n\n& AND\n| OR\n! NOT\n\n\n\nExample - using or operator:\nWhat FALL months have a higher average temperature than August?\nSolution:\n\n\nhide code\n# let's define a vector that contains the fall months \n\nfall &lt;- c(\"Sep\", \"Oct\", \"Nov\")\ntemp[temp &gt; temp[\"Aug\"] | names(temp) %in% fall]\n\n\n Apr  May  Jun July  Sep  Oct  Nov \n82.6 82.6 83.7 83.4 82.5 81.4 82.0 \n\n\n\n\nnames(temp) : calls the attributes of the temp vector\n%in% : a special operator that checks if elements exist in a vector\nnames(temp) %in% fall : checks which attributes are in the fall vector\n\n\nExample - using equals operator:\nWhat month had the highest average temperature?\nSolution:\n\n\nhide code\ntemp[temp == max(temp)]\n\n\n Jun \n83.7 \n\n\nOR if we want just the name of the month, we can index the value from the names attribute:\n\n\nhide code\nnames(temp)[temp == max(temp)]\n\n\n[1] \"Jun\"\n\n\n\n\nExample\nWhat is the average temperature in the summer months?\nSolution:\n\n\nhide code\ntemp[c(\"Jun\", \"July\", \"Aug\")]\n\n\n Jun July  Aug \n83.7 83.4 81.8 \n\n\nhide code\nsummer_months &lt;- c(\"Jun\", \"July\", \"Aug\")\nsummer_temps &lt;- temp[summer_months]\n\naverage_summer &lt;- mean(summer_temps)\nprint(average_summer)\n\n\n[1] 82.96667",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#vector-operations",
    "href": "03_Basics.html#vector-operations",
    "title": "R Basics & Fundamentals",
    "section": "Vector Operations",
    "text": "Vector Operations\nWith vectors, you can utilize element-wise basic arithmetic.\nFor example, if we want to add 2 degrees to every temperature in the temp data vector, then we can define that as:\n\n\nhide code\ntemp &lt;- temp + 2\n\n\n\nExample - Vector Operation\nConvert all temperatures in our temp vector from Fahrenheit to Celsius.\nWe are going to apply this formula:\n\\[\nC = \\frac{5}{9}*(t - 32)\n\\]\nto all values in our temp vector.\nSolution:\n\n\nhide code\ntemp_celcius &lt;- (5/9) * (temp - 32)\n\n\nAll attributes are retained and all values are converted.\n\nExample: \n\nConvert all temperatures from Fahrenheit to Celciu",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#sequences-and-repetition",
    "href": "03_Basics.html#sequences-and-repetition",
    "title": "R Basics & Fundamentals",
    "section": "Sequences and Repetition",
    "text": "Sequences and Repetition\nR has in-house functions that allow you to create a sequence of values (or repeat).\nWe will be using seq and rep, and you can read up for help on the documentation by using ?function in R. This pulls up the documentation and example usage\n\nSequence\nWithout a function, the easiest way to create a sequence with intervals of 1 is using the colon operator\n\n\nhide code\nprint(1:10)\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nFor more flexible sequences, we can use the seq function:\n\n\nExample - Sequence List\nCreate a list of every 3rd value from 1 to 20\n\n\nhide code\nseq(from = 1, to = 20, by = 3)\n\n\n[1]  1  4  7 10 13 16 19\n\n\nNote: This will always include the from value, but NOT the to value. This is dependent on the by number.\n\nInstead of specifying a by number, you can specify how many numbers you would like in between with length.out - this would be equally spaced.\n\n\nhide code\nseq(from = 1, to = 10, length.out = 20)\n\n\n [1]  1.000000  1.473684  1.947368  2.421053  2.894737  3.368421  3.842105\n [8]  4.315789  4.789474  5.263158  5.736842  6.210526  6.684211  7.157895\n[15]  7.631579  8.105263  8.578947  9.052632  9.526316 10.000000\n\n\nFor decreasing, set `by` to be a negative value and switch the from and to values.\n\n\nhide code\nseq(from = 10, to = 1, by = -3)\n\n\n[1] 10  7  4  1",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "03_Basics.html#random-sampling",
    "href": "03_Basics.html#random-sampling",
    "title": "R Basics & Fundamentals",
    "section": "Random Sampling",
    "text": "Random Sampling\nThe sample() function takes a sample from the specified elements of x with or without replacement.\n\nExample - Creating a sample\nCreate a random sample of 20 values ranging from 1 to 100 with replacement.\n\n\nhide code\nsample(1:100, 20, replace = T)\n\n\n [1] 93 54 90 73 23 82 38 18 89 66 31 76 53 11 32  5 71 87 72  8\n\n\n\nNote: running the above code again will not give you the same output:\n\n\nhide code\nsample(1:100, 20, replace = T)\n\n\n [1] 82 86 91 37 23 58 77  3 37 74 87  2 28 69 64 47 57 17 33 84\n\n\nIf you would like to replicate the same results every time, we have to set a seed by using the set.seed(x) function, where x is any arbitrary number.\n\n\nhide code\nset.seed(415)\nsample(1:100, 20, replace = T)\n\n\n [1]  2 94 70 11 91 35 56 47 34 39  1 18 60 29 68  9 70 45 53 67\n\n\n\nRepetition\nTo repeat values in a vector, use the rep() function.\n\n\nhide code\n# repeat 1 four times \nrep(x = 1, times = 4)\n\n\n[1] 1 1 1 1\n\n\nhide code\n# repeat 1 to 5, 10 times\nrep(1:5, times = 10)\n\n\n [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3\n[39] 4 5 1 2 3 4 5 1 2 3 4 5\n\n\nhide code\n# repeat 1, 2, 5, 7 each values twice\nrep(x = c(1, 2, 5, 7), times = 3, each = 2)\n\n\n [1] 1 1 2 2 5 5 7 7 1 1 2 2 5 5 7 7 1 1 2 2 5 5 7 7\n\n\nhide code\n# repeat each element in x by specified vector time (1\n# once, 2 four times, 5, once, and 7 twice)\nrep(x = c(1, 2, 5, 7), times = c(1, 4, 1, 2))\n\n\n[1] 1 2 2 2 2 5 7 7",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  },
  {
    "objectID": "01_install.html",
    "href": "01_install.html",
    "title": "R/RStudio Installation Guide",
    "section": "",
    "text": "Installing R\nTo install R, begin by visiting the Comprehensive R Archive Network (CRAN) here: https://cran.r-project.org/. Select and download the appropriate R binary package for your operating system— whether Windows, macOS, or Linux. For Mac users, please be sure that you install the correct package binary associated with your processor (e.g., Intel or Apple Silicon).",
    "crumbs": [
      "R/RStudio Installation Guide"
    ]
  },
  {
    "objectID": "01_install.html#installing-rstudio",
    "href": "01_install.html#installing-rstudio",
    "title": "R/RStudio Installation Guide",
    "section": "Installing RStudio",
    "text": "Installing RStudio\nRStudio is the most widely used integrated development environment (IDE) for R programming. You can download the free version here: https://posit.co/downloads/. Whie you have the option to use alternative IDEs, such as VS Code with the Rtools extention or the base R GUI, it is recommended to use RStudio as the course material will primarily be demonstrated using this IDE. This will ensure you can easily follow along with the course content!",
    "crumbs": [
      "R/RStudio Installation Guide"
    ]
  },
  {
    "objectID": "04_CLF.html#case-study-govguam-tax-revenue",
    "href": "04_CLF.html#case-study-govguam-tax-revenue",
    "title": "Conditionals, Loops, and Functions",
    "section": "Case Study: GovGuam Tax Revenue",
    "text": "Case Study: GovGuam Tax Revenue\nLet’s examine the table showing Government of Guam tax revenue from 2017-2022 from the 2023 Guam Statistical Yearbook.\n\n\nTo-dos:*\n\nMake two separate vectors: one for the dollar amounts in each category (excluding the total) for 2022, and another for 2021.\nAdd attributes to each vector that describe what the values represent (the category or description).\nFind the difference in tax revenue between 2021 and 2022 in each category.\nBuild two vectors that calculate what percent of the total revenue comes from each category for 2022 and 2021.\nWrite a function that takes in a percentage value (e.g., the share of a tax category) and classifies it into these categories:\n\n&gt; 30% : Large Share\n&gt; 10% : Medium Share\n&lt; 10% : Small Share\n\nUse a for loop to categorize each value in our vectors.\n\n\n\nMake two separate vectors: one for the dollar amounts in each category (excluding the total) for 2022, and another for 2021.\n\n\n\nhide code\n# 2021 tax rev values\ntr_21 &lt;- c(352818, 296806, 65110, 35612, 12372, 10100, 34978, 3519, 3761, 1395, 0)\n\n# 2022 tax rev values\ntr_22 &lt;- c(372492, 327115, 76141, 35794, 18169, 9353, 31643, 4953, 3562, 1473, 0)\n\n\n\nAdd attributes to each vector that describe what the values represent (the category or description).\n\n\n\nhide code\ncategories &lt;- c(\"Income\", \"Gross Receipts\", \"Section 30 Federal income tax\", \"Property\", \"Hotel Occupancy\", \"Liquid Fuel\", \"Tabacco\", \"Alcoholic Beverages\", \"Excise\", \"Lmited Gaming\", \"Other\")\n\nnames(tr_21) &lt;- categories\nnames(tr_22) &lt;- categories\n\n\n\nFind the difference in tax revenue between 2021 and 2022 in each category.\n\n\n\nhide code\ndiff_taxRev &lt;- tr_22 - tr_21\n\n\n\nBuild two vectors that calculate what percent of the total revenue comes from each category for 2022 and 2021.\n\n\n\nhide code\n# grab the total number of tax revenue from all categories for both years\ntotal_22 &lt;- sum(tr_22)\ntotal_21 &lt;- sum(tr_21)\n\n# divide each category by total and multiply by 100 to get percent\npct_tr_21 &lt;- tr_21/total_21 * 100\npct_tr_22 &lt;- tr_22/total_22 * 100",
    "crumbs": [
      "Conditionals, Loops, and Functions"
    ]
  },
  {
    "objectID": "03_Basics.html#lets-move-onto-r-basics",
    "href": "03_Basics.html#lets-move-onto-r-basics",
    "title": "R Basics & Fundamentals",
    "section": "Let’s move onto R Basics!",
    "text": "Let’s move onto R Basics!",
    "crumbs": [
      "R Basics & Fundamentals"
    ]
  }
]