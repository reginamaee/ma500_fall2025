share_categories <- c(share_categories, categorize_tax(pct))
}
print(share_categories)
t <- c(9, "Hello")
class(t)
sum(t)
?apply
?apply
categories <- lapply(pct_tr_21, share_categories)
print(categories)
categories <- lapply(pct_tr_21, categorize_tax)
print(categories)
class(categories)
?sapply
categories_sapply <- sapply(pct_tr_21, categorize_tax)
print(categories_sapply)
class(categories_sapply)
?vapply
categories_mapply(categorize_tax, pct_tr_21, pct_tr_22)
categories_mapply <- mapply(categorize_tax, pct_tr_21, pct_tr_22)
categories_mapply <- mapply(categorize_tax, pct_tr_21, pct_tr_22, simplify=FALSE)
tr_21 <- c("Income" = 352818, "Gross Receipts" = 296806, "Section 30 Federal income tax" = 65110,
"Property" = 35612, "Hotel Occupancy" = 12372, "Liquid Fuel" = 10100, "Tabacco" = 34978,
"Alcoholic Beverages" = 3519, "Excise" = 3761, "Lmited Gaming" = 1395, "Other" = 0)
tr_21
a <- 2.3
num <- 6 * a + 42
den <- 3^(4.2 - 3.62)
ans <- num/den
print(ans)
ans == 29.50556
all.equal(ans, 29.50556)
all.equal(ans, 29.50556, tolerance = 0.0006)
score_summary <- function(v) {
mean    <- mean(v)
median  <- median(v)
range   <- range(v)
min     <- min(v)
max     <- max(v)
sd      <- sd(v)
summary <- c(mean, median, range, min, max, sd)
vals <- c("mean", "median", "range", "min value", "max value", "standard deviation")
names(summary) <- vals
return(summary)
}
score_summary(scores)
scores <- c(88, 62, 90, 75, 58, 83, 92, 67, 77, 81)
score_summary <- function(v) {
mean    <- mean(v)
median  <- median(v)
range   <- range(v)
min     <- min(v)
max     <- max(v)
sd      <- sd(v)
summary <- c(mean, median, range, min, max, sd)
vals <- c("mean", "median", "range", "min value", "max value", "standard deviation")
names(summary) <- vals
return(summary)
}
score_summary(scores)
?median
score_summary(scores)
range(scores)
score_summary <- function(v) {
mean    <- mean(v)
median  <- median(v)
min     <- min(v)
max     <- max(v)
range   <- max - min
sd      <- sd(v)
summary <- c(mean, median, range, min, max, sd)
vals <- c("mean", "median", "range", "min value", "max value", "standard deviation")
names(summary) <- vals
return(summary)
}
score_summary(scores)
score_summary(scores)
score_summary <- function(v) {
mean    <- mean(v)
median  <- median(v)
min     <- min(v)
max     <- max(v)
range   <- max - min
sd      <- sd(v)
summary <- c(mean, median, range, min, max, sd)
summary <- round(summar, 2)
vals    <- c("mean", "median", "range", "min value", "max value", "standard deviation")
names(summary) <- vals
return(summary)
}
score_summary(scores)
score_summary <- function(v) {
mean    <- mean(v)
median  <- median(v)
min     <- min(v)
max     <- max(v)
range   <- max - min
sd      <- sd(v)
summary <- c(mean, median, range, min, max, sd)
summary <- round(summary, 2)
vals    <- c("mean", "median", "range", "min value", "max value", "standard deviation")
names(summary) <- vals
return(summary)
}
score_summary(scores)
sum(scores[scores > 70])
length(scores[scores > 70])
table(scores)
score_summary <- function(v) {
mean    <- mean(v)
median  <- median(v)
min     <- min(v)
max     <- max(v)
range   <- max - min
sd      <- sd(v)
passing <- length(v[v > 75])
summary <- c(mean, median, range, min, max, sd, passing)
summary <- round(summary, 2)
vals    <- c("mean", "median", "range", "min value", "max value", "standard deviation", "number that passed")
names(summary) <- vals
return(summary)
}
score_summary(scores)
quiz_scores <- sample(x = 30:100, size = 12, replace = T)
score_summary(quiz_scores)
score_summary(scores)
quiz_scores
score_summary <- function(v, passing_score) {
mean    <- mean(v)
median  <- median(v)
min     <- min(v)
max     <- max(v)
range   <- max - min
sd      <- sd(v)
passing <- length(v[v > passing_score])
summary <- c(mean, median, range, min, max, sd, passing)
summary <- round(summary, 2)
vals    <- c("mean", "median", "range", "min value", "max value", "standard deviation", "number that passed")
names(summary) <- vals
return(summary)
}
score_summary(scores, 60)
score_summary(scores, 85)
males   <- c(0,6,69,162,166,194,236, 156, 179, 102, 39, 26)
females <- c(0,6,75, 193, 188, 225, 270, 197, 207, 113, 65, 20)
age <- c("Under 20", "20-24", "25-29", "30-24", "35-39", "40-44",
"45-49", "50-54", "55-59", "60-64", "65-69", "70 and over")
names(males) <- age
names(females) <- age
total <- males + females
print(total)
total
print(total)
males   <- c(0,6,69,162,166,194,236, 256, 179, 102, 39, 26)
females <- c(0,6,75, 193, 188, 225, 270, 197, 207, 113, 65, 20)
age <- c("Under 20", "20-24", "25-29", "30-24", "35-39", "40-44",
"45-49", "50-54", "55-59", "60-64", "65-69", "70 and over")
names(males) <- age
names(females) <- age
total <- males + females
print(total)
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
print(l[1])
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
print(l[1])
print(l[2])
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
print(l[1])
print(l[2])
print(l[1,3])
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
print(l[1])
print(l[2])
print(l[[1]][3])
print(l$num[3])
# vector num: numeric
num <- c(1,8,9,2)
name(num) <- c("1", "2", "3", "4")
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
print(l[1])
print(l[2])
print(l[[1]][3])
print(l$num[3])
# vector num: numeric
num <- c(1,8,9,2)
names(num) <- c("1", "2", "3", "4")
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
print(l[1])
print(l[2])
print(l[[1]][3])
print(l$num[3])
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
print(l[1])
print(l[2])
print(l[[1]][3])
print(l$num[3])
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
print(l[1])
print(l[2])
print(l[[1]][3])
names(l) <- c("num", "char")
print(l$num[3])
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
# returns the first element of the list
print(l[1])
print(l[[1]])
# returns the second element of the list
print(l[2])
print(l[[2]])
print(l[[1]][3])
names(l) <- c("num", "char")
print(l$num[3])
print(l[[1]])
print(l[1])
# vector num: numeric
num <- c(1,8,9,2)
# vector char: character
char <- c("Apple", "Banana")
# list: l combination of num and char
l <- list(num, char)
print(l)
# index
# returns the first element of the list
# single bracket - returns as a list
print(l[1])
# double bracker - returns back the vector
print(l[[1]])
# returns the second element of the list
print(l[2])
print(l[[2]])
# returns the 3rd element of the vector in the first element of the list
print(l[[1]][3])
# setting names in the list
names(l) <- c("num", "char")
print(l$num[3])
b <- 4
a <- 2
-b < a
a > b
a <- 9
b <- 4
-b < a
a > b
rm(list=ls())
?append()
library(tidyverse)
dt <- read.xlsx("/Users/rdominguez/Downloads/Guam_2010_Census_Detailed_Crosstabulations_Part1_v3.xlsx")
library(openxlsx)
dt <- read.xlsx("/Users/rdominguez/Downloads/Guam_2010_Census_Detailed_Crosstabulations_Part1_v3.xlsx")
View(dt)
sheet = dt[1]
View(sheet)
sheet <- dt[,1]
dt <- read.xlsx("/Users/rdominguez/Downloads/Guam_2010_Census_Detailed_Crosstabulations_Part1_v3.xlsx", sheet=sheet)
?read.xlsx
dt <- read.xlsx("/Users/rdominguez/Downloads/Guam_2010_Census_Detailed_Crosstabulations_Part1_v3.xlsx", sheet="1-1")
View(dt)
cleaned <- dt %>%
fill(everything())
View(cleaned)
dt <- read.xlsx("/Users/rdominguez/Downloads/Guam_2010_Census_Detailed_Crosstabulations_Part1_v3.xlsx", sheet="1-1", skip = 3)
library(readxl)
dt <- read_excel("/Users/rdominguez/Downloads/Guam_2010_Census_Detailed_Crosstabulations_Part1_v3.xlsx", sheet="1-1", skip = 3)
View(dt)
library(readxl)
library(dplyr)
library(tidyr)
library(janitor)
install.packages("janitor")
library(readxl)
library(dplyr)
library(tidyr)
library(janitor)
raw <- read_excel("/Users/rdominguez/Downloads/Guam_2010_Census_Detailed_Crosstabulations_Part1_v3.xlsx", sheet="1-1", skip = 3, col_names = FALSE)
View(raw)
header_rows <- raw[1:2, ] %>% as.data.frame()
View(header_rows)
# Collapse multi-row headers into one row of names
col_names <- apply(header_rows, 2, function(x) paste(na.omit(x), collapse = "_"))
# Clean names to be R-safe
col_names <- make_clean_names(col_names)
# Step 3: Drop those header rows from the data
dat <- raw[-c(1:2), ]
colnames(dat) <- col_names
# Step 4: Fill down merged values in the "characteristic" column
dat <- dat %>%
fill(characteristic, .direction = "down")
# Step 5: Convert wide â†’ long (tidy)
dat_long <- dat %>%
pivot_longer(
cols = -characteristic,
names_to = "ethnic_group",
values_to = "count"
)
View(dat)
# Step 6: Convert count column to numeric
dat_long <- dat_long %>%
mutate(count = as.numeric(count))
View(dat_long)
tr_21 <- c(352818, 296806, 65110, 35612, 12372, 10100, 34978, 3519, 3761, 1395, 0)
tr_22 <- c(372492, 327115, 76141, 35794, 18169, 9353, 31643, 4953, 3562, 1473, 0)
categories <- c("Income", "Gross Receipts", "Section 30 Federal income tax", "Property", "Hotel Occupancy", "Liquid Fuel", "Tabacco", "Alcoholic Beverages", "Excise", "Lmited Gaming", "Other")
tax_rev <- data.frame(description = categories,
tax_2021 = tr_21,
tax_2022 = tr_22)
print(head(tax_rev))
sum <- function(x) {
x + y
}
y <- 15
sum(12)
str(dt)
tr_21 <- c(352818, 296806, 65110, 35612, 12372, 10100, 34978, 3519, 3761, 1395, 0)
tr_22 <- c(372492, 327115, 76141, 35794, 18169, 9353, 31643, 4953, 3562, 1473, 0)
categories <- c("Income", "Gross Receipts", "Section 30 Federal income tax", "Property", "Hotel Occupancy", "Liquid Fuel", "Tabacco", "Alcoholic Beverages", "Excise", "Lmited Gaming", "Other")
tax_rev <- data.frame(description = categories,
tax_2021 = tr_21,
tax_2022 = tr_22)
print(head(tax_rev))
str(tax_rev)
lapply(tax_rev, unique)
attach(tax_rev)
rm(list=ls())
tr_21 <- c(352818, 296806, 65110, 35612, 12372, 10100, 34978, 3519, 3761, 1395, 0)
tr_22 <- c(372492, 327115, 76141, 35794, 18169, 9353, 31643, 4953, 3562, 1473, 0)
categories <- c("Income", "Gross Receipts", "Section 30 Federal income tax", "Property", "Hotel Occupancy", "Liquid Fuel", "Tabacco", "Alcoholic Beverages", "Excise", "Lmited Gaming", "Other")
tax_rev <- data.frame(description = categories,
tax_2021 = tr_21,
tax_2022 = tr_22)
print(head(tax_rev))
rm(categories)
rm(tr_21)
rm(tr_22)
attach(tax_rev)
tr_21
mean(tr_21)
tax_2021
detach(tax_rev)
dir <- "/Users/rdominguez/Documents/MA500/Lessons/datasets/"
ow <- read_csv(paste0(dir, "overwatch_stats.csv"))
rm(list=ls())
?read_csv
?read.csv
?head()
?summary()
?str
?read_csv
# personal preference for me is to create a separate string that is my parent folder
dir <- "/Users/rdominguez/Documents/MA500/Lessons/datasets/"
ow <- read_csv(paste0(dir, "overwatch_stats.csv"))
# output all unique values in the Player column
unique(ow$Player)
# OR use the apply function for the unique function
apply(ow, unique)
# output all unique values in the Player column
unique(ow$Player)
# OR use the apply function for the unique function
lapply(ow, unique)
apply(ow, 2, unique)
?as.Date
as.Date("09-03-2025", format = "%m-%d-%Y")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
dir <- "/Users/rdominguez/Documents/MA500/Lessons/datasets/"
# read_csv
ow <- read_csv(paste0(dir, "overwatch_stats.csv"))
head(ow)
summary(ow)
str(ow)
unique(ow$Player)
unique(ow$Player)
lapply(ow, unique)
?as.Date
unique(ow$Date)
# as.Date
# %Y - 4 digits in year
# %y - 2 digits in year
ow$Date <- as.Date(ow$Date, format = "%m/%d/%y")
class(ow$Date)
unique(ow$Date)
# plotting a histogram
hist(ow$Damage)
boxplot(ow$Damage)
together <- c(numbers, squares)
numbers <- c(1,2)
squares <- c(1, 4)
together <- c(numbers, squares)
cumsum(c(numbers, squares))
sum(test)
sum(2)
test <- 1
test
sum <- function(x) {
test <- 2
return(x + test)
}
sum(2)
test
ow %>%
head() %>%
summary()
rstudioapi::convertTheme("Tomorrow Night 80s",
output = "~/Desktop/TomorrowNight80s-Inline.rstheme",
format = "rstheme")
rstudioapi::convertTheme("Tomorrow Night 80s",
output = "~/Desktop/TomorrowNight80s-Inline.rstheme",
format = "rstheme")
rstudioapi::convertTheme("Tomorrow Night 80s",
"~/Desktop/TomorrowNight80s.tmTheme")
rstudioapi::convertTheme("~/Downloads/Tomorrow-Night-Eighties.tmTheme",
"~/Desktop/TomorrowNight80s-Inline.rstheme")
hero <- read_csv(paste0(dir, "overwatch_heros.csv"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls()) # clear environment
library(tidyverse)
library(tidyverse)
dir <- "/Users/rdominguez/Documents/MA500/Lessons/datasets/"
# read_csv
ow <- read_csv(paste0(dir, "overwatch_stats.csv"))
hero <- read_csv(paste0(dir, "overwatch_heros.csv"))
colnames(hero)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
dir <- "/Users/rdominguez/Documents/MA500/Lessons/datasets/"
# read_csv
ow <- read_csv(paste0(dir, "overwatch_stats.csv"))
hero <- read_csv(paste0(dir, "overwatch_heros.csv"))
library(readr)
hero <- read_csv(paste0(dir, "overwatch_heros.csv"))
library(rsconnect)
install.packages("rsconnect")
/Users/rdominguez/Desktop/able-groove-372318-fb847b9f0c48.json
rsconnect::setAccountInfo(name='rmvdominguez', token='4FE4AA5572DC7A074ADA2EB7C7C274BF', secret='QPwoJiWBCjx1pNpfiwSAQT/+tZNmyE3hwsROEN7A')
rsconnect::deployApp("/Users/rdominguez/Desktop/app_test/app.R")
rlang::last_trace()
appdir <- "/Users/rdominguez/Desktop/app_test/app.R"
rsconnect::deployApp(appdir)
rsconnect::deployApp("/Users/rdominguez/Desktop/app_test/")
