# Introduction to Dataframes {.unnumbered}

### What is a `data.frame`?

A `data.frame` in `R` is a data structure used to store data in a tabular form. It is very similar to a spreadsheet, excel sheet, or SQL table within R. You can also think of it as a collection of multiple data vectors. A `data.frame` is two-dimensional, meaning it has rows and columns where:

-   each *row* represents an observation
-   each *column* represents a variable, attribute, or feature.

### What is `tidyverse`?

`Tidyverse` is a collection of packages to help with cleaning, transformation, visualization, and analysis. (A few packages in `Tidyverse` include `dplyr`, `ggplot2`, `tidyr`, and `readr`). In this class, we will be using this collection for data wrangling, cleaning, and transforming.

You can install tidyverse by running: `install.packages("tidyverse")`.

### What is `ggplot2`?

This is *the* R package for data visualization. This suite provides an easy way to visualize your data with: bar charts, scatter plots, time trends, etc. Writing ggplot code comprises of these components: the data being visualized, the aesthetics (how you would like the variables to be mapped), and geometric objects (the shapes that represent the data).

Note: Installing `tidyverse` also installs `ggplot2`, since itâ€™s one of the core packages included.

## Creating a Data.frame

You can build a `data.frame` either by defining it within R or by reading data from a `.csv` or `.xlsx` file.

### Defining in R

::: callout-example
Let's add our previously defined vectors in a `data.frame`. ![](images/clipboard-3553642164.png){width="1200"}

```{r}
tr_21 <- c(352818, 296806, 65110, 35612, 12372, 10100, 34978, 3519, 3761, 1395, 0)
tr_22 <- c(372492, 327115, 76141, 35794, 18169, 9353, 31643, 4953, 3562, 1473, 0)
categories <- c("Income", "Gross Receipts", "Section 30 Federal income tax", "Property", "Hotel Occupancy", "Liquid Fuel", "Tabacco", "Alcoholic Beverages", "Excise", "Lmited Gaming", "Other")

tax_rev <- data.frame(description = categories, 
                      tax_2021 = tr_21, 
                      tax_2022 = tr_22)

print(head(tax_rev))
```
:::

### Reading in a `.csv`

To read a separate `.csv` file into R, we will use the `read_csv` function from the `readr` package (also part of `tidyverse`).

::: callout-example
```{r, message = FALSE}
library(tidyverse)
```

```{r}

# personal preference for me is to create a separate string that is my parent folder
dir <- "/Users/rdominguez/Documents/MA500/Lessons/datasets/"
ow <- read_csv(paste0(dir, "overwatch_stats.csv"))
```
:::

## Analyzing the data

Once your data is loaded into R, the best first steps is to inspect it. The main focus: get familiar with the data and summarize its main characteristics.

The `head()` function displays the first 6 rows of your dataset
```{r}
head(ow)
```

The `summary()` function provides us with a statistical summary of each column or variable.

```{r}
summary(ow)
```

The `str()` function gives a structural overview of the data.

```{r}
str(ow)
```

Another useful thing to analyze is looking at all the possible values in your columns - sometimes, the `str()` function shows all unique values, but other times it gets cut off. We can do it this way:
```{r}
# output all unique values in the Player column 
unique(ow$Player)

# OR use the apply function for the unique function
lapply(ow, unique)
```

::: callout-note
We can access a column in a `data.frame` by using the `$` operator. When we do this, we can treat the column as if it is a single vector.
:::

If we analyze the output of the `summary()` and the `str()` function, we can see that the `Date` column is categorized as a `character`. Let's reassign it's class by using the `as.Date` function.
```{r}

#' because the values of Date appear as MM/DD/YY in the data, we will use %m/%d/%y to follow the same format.
#' %y represents year using 2 digits, %Y represents using 4 digits

ow$Date <- as.Date(ow$Date, format = "%m/%d/%y")
class(ow$Date)

```

## Visualizing the data
The output of `summary()` and `str()` told us that we have several `numeric` columns in our data: `eliminations`, `assists`, `deaths`, `damage`, `heals`, and `mitigation`.

Let's first visualize a histogram for the `damage` column to determine its distribution.

```{r}
# using base R function: hist()
hist(ow$Damage)
```

We can also create a boxplot as another way to view its distribution and determine what our potential outliers would look like.
```{r}
# using base R function: boxplot()
boxplot(ow$Damage)
```
