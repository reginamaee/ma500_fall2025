{
  "hash": "a5d0755066638bc22c82811be9847b92",
  "result": {
    "engine": "knitr",
    "markdown": "# R Basics & Fundamentals {.unnumbered}\n\n## R Markdown {.unnumbered}\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nImportant commands when using RMarkdown: Use the `/` to quick insert markdown elements: R code chunk, Heading/Format Options, etc.\n\nIn-line code notation: \\` \\<- symbol with \\~ on keyboard?\n\n## Let's move onto R Basics!\n\n## Comments\n\nIt is recommended to always comment/annotate your code to make concepts clear. In R, we use the `#` symbol to indicate a comment.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is a comment \n\n#' \n#' this is a multi-line comment\n#' \n```\n:::\n\n\n\n\n\n\n\n\n## Using R as a calculator\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# in either a script or the console, you can use it to solve basic arithmentic\n1 / 200 * 30\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.15\n```\n\n\n:::\n\n```{.r .cell-code}\nsin(pi/2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## R Packages\n\nThe `base` installation of R consists of many in-house `functions` and `commands`, but more specialized techniques would require the installation of packages. A few packages that you should have for this course and I would recommend downloading are:\n\n-   `ggplot2`\n\n-   `MASS`\n\n-   `stats`\n\n-   `tidyverse`/`dplyr`\n\n*Note:* If you are using a mac, some development packages would require you to install `XQuartz` or `XCode`. If issues come up with installing a package or getting a package to work, please let me know so I can help you out!\n\nFind more packages here: <https://cran.r-project.org/>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how to install packages\ninstall.packages(\"MASS\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# calling the package after installation\nlibrary(\"MASS\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# updating packages/all packages\nupdate.packages()\n```\n:::\n\n\n\n\n\n\n\n\n## Directories\n\nWhen you run RStudio, your session is typically associated with a *working directory.* This is the default location where your files are imported or saved.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check your working directory with this function\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/rdominguez/Documents/MA500/Fall25/ma500_fall2025\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/insertFilePathHere\")\n```\n:::\n\n\n\n\n\n\n\n\n## Variables\n\nYou can save and create new objects to store your results by using `<-` (as opposed to the conventional `=` which is used with `named function assignments`.)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# store the result of 4*3 into x\n\nx <- 4 * 3\n\n# print x (assignment alone does not print output)\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.bg-warning}\n[1] 12\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nNote: R is a *dynamic language*, so the types and values can easily be changed. (type checks are done during run-time)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# x is now a of type character\nx <- \"statistics\"\n```\n:::\n\n\n\n\n\n\n\n\n## R data types\n\nA **data type** describes the kind of values a variable can hold and how R will interpret and use those values in calculations, comparisons, and functions. Choosing/creating the right data type is important because it affects how R stores information and what operations you can perform.\n\nR data types include:\n\n-   **`numeric`**:\n\n    -   `double` values with decimals\n\n    -   `int` whole numbers\n\n-   **`character`** – text or strings (`\"Hello\"`)\n\n-   **`logical`** – TRUE/FALSE values\n\n-   **`factor`** – categorical data (`\"A\"`, `\"B\"`)\n\nUse the `class()` function to determine what data type your variable is:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(2L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## Data Vectors\n\nAn **R data vector** is a collection of observations or measurements concerning a single variable **of the same data type** (all numeric, all character, all logical, etc.). The `c()` function takes individual values and *combines them into a single vector*.\n\n::: callout-example\n### Example\n\nIn 2021, the average temperature in Guam for each month was 80.7, 81.4, 81.5, 82.6, 82.6, 83.7, 83.4, 81.8, 82.5, 81.4, 82.0, and 81.0. Store these values in a vector named `temp`.\n\n*Solution:*\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- c(80.7, 81.4, 81.5, 82.6, 82.6, 83.7, 83.4, 81.8, 82.5, 81.4, 82.0, 81.0)\n```\n:::\n\n\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns the length of temp \nlength(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# we can perform these function because all values in temp is a numeric value\nsum(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 984.6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 82.05\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nIn the case you have a `NA` in your vector, `sum()` and `mean()` will return `NA`. To bypass that, you need to include the argument: `na.rm = TRUE`.\n\n### Attributes\n\nVectors can be assigned **attributes** or **names.**\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonths <- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"July\",\n    \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\nnames(temp) <- months\nprint(temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Jan  Feb  Mar  Apr  May  Jun July  Aug  Sep  Oct  Nov  Dec \n80.7 81.4 81.5 82.6 82.6 83.7 83.4 81.8 82.5 81.4 82.0 81.0 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n### Indexing\n\nYou can call a specific value in the `temp` vector by referencing its respective name.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the average temperature in May\ntemp[\"May\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n May \n82.6 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nOR, you can index the vector by referencing its numeric index value.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# grabs the first value\ntemp[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Jan \n80.7 \n```\n\n\n:::\n\n```{.r .cell-code}\n# grab the first 4 values\ntemp[1:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Jan  Feb  Mar  Apr \n80.7 81.4 81.5 82.6 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n### Operators\n\n**Operators** are symbols that tell R what kind of computation to perform on values or variables. They are the building blocks for calculations, comparisons, and logical expressions.\n\n#### Comparison:\n\n-   `>` greater than\n-   `<` less than\n-   `<=` less than or equal to\n-   `>=` greater than or equal to\n-   `==` equal to\n-   `!=` not equal to\n\n::: callout-example\n### Example:\n\nWhat months have a higher average temperature compared to August?\n\n*Solution:*\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp[temp < temp[\"Aug\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Jan  Feb  Mar  Oct  Dec \n80.7 81.4 81.5 81.4 81.0 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n:::\n\nLet's break the line of code down:\n\n-   `temp['Aug']` : refers to the temperature in August.\n\n-   `temp > temp['Aug']` : checks all values of the `temp` vector to check if this statement is true\n\n-   `temp[temp > temp['Aug']]`: returns only the months & values where the second bullet is true.\n\n#### Logical\n\n-   `&` AND\n-   `|` OR\n-   `!` NOT\n\n```         \nExample: \n\nWhat FALL months have an higher average temperature than August?\n```\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# let's define a vector that contains the fall months \n\nfall <- c(\"Sep\", \"Oct\", \"Nov\")\ntemp[temp > temp[\"Aug\"] | names(temp) %in% fall]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Apr  May  Jun July  Sep  Oct  Nov \n82.6 82.6 83.7 83.4 82.5 81.4 82.0 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   `names(temp)` : calls the attributes of the `temp` vector\n\n-   `%in%` : a special operator that checks if elements exist in a vector\n\n-   `names(temp) %in% fall` : checks which attributes are in the `fall` vector\n\n```         \nWhat month had the highest average temperature?\n```\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp[temp == max(temp)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Jun \n83.7 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nOR if we want just the name of the month, we can index the value from the names attribute\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(temp)[temp == max(temp)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Jun\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n```         \nWhat is the average temperature in the summer months?\n```\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp[c(\"Jun\", \"July\", \"Aug\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Jun July  Aug \n83.7 83.4 81.8 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummer_months <- c(\"Jun\", \"July\", \"Aug\")\nsummer_temps <- temp[summer_months]\n\naverage_summer <- mean(summer_temps)\nprint(average_summer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 82.96667\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## Vector Operations\n\nWith vectors, you can utilize element-wise basic arithmetic.\n\nFor example, if we want to add 2 degrees to every temperature in the `temp` data vector, then we can define that as:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- temp + 2\n```\n:::\n\n\n\n\n\n\n\n\n```         \nExample: \n\nConvert all temperatures from Fahrenheit to Celcius.\n```\n\nWe are going to apply this formula:\n\n$$\nC = \\frac{5}{9}*(t - 32)\n$$\n\nto all values in our `temp` vector.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_celcius <- (5/9) * (temp - 32)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(temp_celcius)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Jan      Feb      Mar      Apr      May      Jun     July      Aug \n28.16667 28.55556 28.61111 29.22222 29.22222 29.83333 29.66667 28.77778 \n     Sep      Oct      Nov      Dec \n29.16667 28.55556 28.88889 28.33333 \n```\n\n\n:::\n\n```{.r .cell-code}\nmean(temp_celcius)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28.91667\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nAll attributes are retained and all values are converted.\n\n## Sequences and Repetition\n\n`R` has in-house functions that allow you to create a sequence of values (or repeat).\n\nWe will be using `seq` and `rep`, and you can read up for help on the documentation by using ?function in R. This pulls up the documentation and example usage\n\n## Sequence\n\nWithout a function, the easiest way to create a sequence with intervals of 1 is using the colon operator\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nFor more flexible sequences, we can use the `seq` function:\n\n```         \nExample: \n\nCreate a list of every 3rd value from 1 to 20\n```\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 20, by = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  4  7 10 13 16 19\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nNote: This will *always* include the `from` value, but NOT the `to` value. This is dependent on the `by` number.\n",
    "supporting": [
      "03_Basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}